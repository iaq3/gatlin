<launch>
	<arg name="gui" default="true" />
	<arg name="rviz" default="true" />
	<arg name="bridge" default="false" />
	<arg name="sim" default="true" />

	<arg name="base"       default="create"/>
	<arg name="stacks"     default="circles"/>
	<arg name="3d_sensor"  default="kinect"/>

	<arg name="urdf_file" default="$(find xacro)/xacro.py '$(find gatlin)/robots/gatlin_with_arm_and_head.urdf.xacro'" />
	<!-- <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find gatlin)/urdf/pan_tilt_head.urdf.xacro'" /> -->
	<!-- <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find gatlin)/urdf/pan_tilt_head.urdf.xacro'" /> -->
	<!-- <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find gatlin)/urdf/pincher_arm.urdf.xacro'" /> -->
    <!-- <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" /> -->

	<param name="robot_description" command="$(arg urdf_file)" />
	
	<!-- Gazebo model spawner -->
    <!-- <node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model" args="$(optenv ROBOT_INITIAL_POSE) -unpause -urdf -param robot_description -model turtlebot"/> -->

	<!-- <param name="use_gui" value="$(arg gui)"/> -->
	<!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" /> -->
	<!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" /> -->
	<!-- <node name="fake_joint_pub" pkg="turtlebot_arm_bringup" type="fake_joint_pub.py"/> -->
	<node if="$(arg rviz)" name="rviz" pkg="rviz" type="rviz" args="-d $(find gatlin)/rviz/urdf.rviz" required="true" />

	<include if="$(arg bridge)" file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" >
		<arg name="port" value="9090"/>
	</include>

	<!-- <node if="$(arg bridge)" pkg="gatlin" type="head_controller.py" name="head_controller" output="screen" ></node> -->

	<!-- <rosparam if="$(arg sim)" file="$(find gatlin)/config/fake_controllers.yaml"/> -->
	<!-- <include file="$(find gatlin)/launch/move_group.launch">
		<arg name="allow_trajectory_execution" value="true"/>  
		<arg name="fake_execution" value="$(arg sim)"/>
		<arg name="info" value="true"/>
		<arg name="debug" value="false"/>
	</include> -->

	<!-- <node if="$(arg sim)" name="joint_state_publisher_arm" pkg="joint_state_publisher" type="joint_state_publisher">
		<param name="/use_gui" value="$(arg gui)"/> 
		<rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
	</node> -->

	<include file="$(find gatlin)/launch/arm_minimal.launch">
		<arg name="gui" value="$(arg gui)"/>
		<arg name="sim" value="$(arg sim)"/>
		<arg name="rviz" value="false"/>
	</include>

	<!-- <include file="$(find gatlin)/launch/base_minimal.launch">
		<arg name="sim" value="$(arg sim)"/>
	</include> -->

	<!-- <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
		<param name="publish_frequency" type="double" value="30.0" />
	</node> -->

	<param name="/use_sim_time" value="$(arg sim)"/>

	<arg name="world_file"  default="$(env TURTLEBOT_GAZEBO_WORLD_FILE)"/>
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="use_sim_time" value="true"/>
		<arg name="debug" value="false"/>
		<arg name="gui" value="$(arg gui)" />
		<arg name="world_name" value="$(arg world_file)"/>
	</include>

	<!--  <include file="$(find turtlebot_gazebo)/launch/includes/$(arg base).launch.xml">
	<arg name="base" value="$(arg base)"/>
	<arg name="stacks" value="$(arg stacks)"/>
	<arg name="3d_sensor" value="$(arg 3d_sensor)"/>
	</include> -->
	<!-- create.launch.xml -->
	<!-- <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" /> -->
	<!-- <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find gatlin)/robots/gatlin_with_arm_and_head.urdf.xacro'" /> -->
	<!-- <param name="robot_description" command="$(arg urdf_file)" /> -->

	<!-- Gazebo model spawner -->
	<node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model" args="$(optenv ROBOT_INITIAL_POSE) -unpause -urdf -param robot_description -model turtlebot"/>

	<!-- Odometry estimator -->
	<node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
		<remap from="imu_data" to="turtlebot_node/imu/data"/>
		<remap from="robot_pose_ekf/odom" to="odom_combined"/>
		<param name="freq" value="30.0"/>
		<param name="sensor_timeout" value="1.0"/>
		<param name="odom_used" value="true"/>
		<param name="imu_used" value="true"/>
		<param name="vo_used" value="false"/>
		<param name="output_frame" value="odom"/>
	</node>

	<!-- Velocity muxer -->
	<node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>

	<node pkg="nodelet" type="nodelet" name="cmd_vel_mux" args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
		<param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
		<remap from="cmd_vel_mux/output" to="turtlebot_node/cmd_vel" />
	</node>
	<!-- create.launch.xml -->

	<!-- <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
		<param name="publish_frequency" type="double" value="30.0" />
	</node> -->

	<!-- Fake laser -->
	<node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
	<node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan" args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
		<param name="scan_height" value="10"/>
		<param name="output_frame_id" value="/camera_depth_frame"/>
		<param name="range_min" value="0.45"/>
		<remap from="image" to="/camera/depth/image_raw"/>
		<remap from="scan" to="/scan"/>
	</node>

</launch>
